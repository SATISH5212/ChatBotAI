/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomepageRouteImport } from './routes/homepage'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as LayoutTeleopRouteImport } from './routes/_layout/teleop'
import { Route as LayoutSettingsRouteImport } from './routes/_layout/settings'
import { Route as LayoutFieldsRouteImport } from './routes/_layout/fields'
import { Route as LayoutDevicesRouteImport } from './routes/_layout/devices'

const HomepageRoute = HomepageRouteImport.update({
  id: '/homepage',
  path: '/homepage',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutTeleopRoute = LayoutTeleopRouteImport.update({
  id: '/teleop',
  path: '/teleop',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsRoute = LayoutSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutFieldsRoute = LayoutFieldsRouteImport.update({
  id: '/fields',
  path: '/fields',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDevicesRoute = LayoutDevicesRouteImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/homepage': typeof HomepageRoute
  '/devices': typeof LayoutDevicesRoute
  '/fields': typeof LayoutFieldsRoute
  '/settings': typeof LayoutSettingsRoute
  '/teleop': typeof LayoutTeleopRoute
  '/auth': typeof AuthIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/homepage': typeof HomepageRoute
  '/devices': typeof LayoutDevicesRoute
  '/fields': typeof LayoutFieldsRoute
  '/settings': typeof LayoutSettingsRoute
  '/teleop': typeof LayoutTeleopRoute
  '/auth': typeof AuthIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/homepage': typeof HomepageRoute
  '/_layout/devices': typeof LayoutDevicesRoute
  '/_layout/fields': typeof LayoutFieldsRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/teleop': typeof LayoutTeleopRoute
  '/auth/': typeof AuthIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/homepage'
    | '/devices'
    | '/fields'
    | '/settings'
    | '/teleop'
    | '/auth'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/homepage'
    | '/devices'
    | '/fields'
    | '/settings'
    | '/teleop'
    | '/auth'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_layout'
    | '/homepage'
    | '/_layout/devices'
    | '/_layout/fields'
    | '/_layout/settings'
    | '/_layout/teleop'
    | '/auth/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  HomepageRoute: typeof HomepageRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/homepage': {
      id: '/homepage'
      path: '/homepage'
      fullPath: '/homepage'
      preLoaderRoute: typeof HomepageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/teleop': {
      id: '/_layout/teleop'
      path: '/teleop'
      fullPath: '/teleop'
      preLoaderRoute: typeof LayoutTeleopRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/fields': {
      id: '/_layout/fields'
      path: '/fields'
      fullPath: '/fields'
      preLoaderRoute: typeof LayoutFieldsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/devices': {
      id: '/_layout/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof LayoutDevicesRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutDevicesRoute: typeof LayoutDevicesRoute
  LayoutFieldsRoute: typeof LayoutFieldsRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutTeleopRoute: typeof LayoutTeleopRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDevicesRoute: LayoutDevicesRoute,
  LayoutFieldsRoute: LayoutFieldsRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutTeleopRoute: LayoutTeleopRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  LayoutRoute: LayoutRouteWithChildren,
  HomepageRoute: HomepageRoute,
  AuthIndexRoute: AuthIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
