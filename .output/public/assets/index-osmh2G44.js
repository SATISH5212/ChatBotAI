var m=63710088e-1;function A(e,i,r={}){const t={type:"Feature"};return(r.id===0||r.id)&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.properties=i||{},t.geometry=e,t}function R(e,i,r={}){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!E(e[0])||!E(e[1]))throw new Error("coordinates must contain numbers");return A({type:"Point",coordinates:e},i,r)}function O(e,i,r={}){for(const n of e){if(n.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");if(n[n.length-1].length!==n[0].length)throw new Error("First and last Position are not equivalent.");for(let o=0;o<n[n.length-1].length;o++)if(n[n.length-1][o]!==n[0][o])throw new Error("First and last Position are not equivalent.")}return A({type:"Polygon",coordinates:e},i,r)}function E(e){return!isNaN(e)&&e!==null&&!Array.isArray(e)}function G(e,i,r){if(e!==null)for(var t,n,o,a,s,l,f,h=0,u=0,g,y=e.type,w=y==="FeatureCollection",v=y==="Feature",k=w?e.features.length:1,P=0;P<k;P++){f=w?e.features[P].geometry:v?e.geometry:e,g=f?f.type==="GeometryCollection":!1,s=g?f.geometries.length:1;for(var M=0;M<s;M++){var c=0,b=0;if(a=g?f.geometries[M]:f,a!==null){l=a.coordinates;var p=a.type;switch(h=p==="Polygon"||p==="MultiPolygon"?1:0,p){case null:break;case"Point":if(i(l,u,P,c,b)===!1)return!1;u++,c++;break;case"LineString":case"MultiPoint":for(t=0;t<l.length;t++){if(i(l[t],u,P,c,b)===!1)return!1;u++,p==="MultiPoint"&&c++}p==="LineString"&&c++;break;case"Polygon":case"MultiLineString":for(t=0;t<l.length;t++){for(n=0;n<l[t].length-h;n++){if(i(l[t][n],u,P,c,b)===!1)return!1;u++}p==="MultiLineString"&&c++,p==="Polygon"&&b++}p==="Polygon"&&c++;break;case"MultiPolygon":for(t=0;t<l.length;t++){for(b=0,n=0;n<l[t].length;n++){for(o=0;o<l[t][n].length-h;o++){if(i(l[t][n][o],u,P,c,b)===!1)return!1;u++}b++}c++}break;case"GeometryCollection":for(t=0;t<a.geometries.length;t++)if(G(a.geometries[t],i)===!1)return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function q(e,i){var r,t,n,o,a,s,l,f,h,u,g=0,y=e.type==="FeatureCollection",w=e.type==="Feature",v=y?e.features.length:1;for(r=0;r<v;r++){for(s=y?e.features[r].geometry:w?e.geometry:e,f=y?e.features[r].properties:w?e.properties:{},h=y?e.features[r].bbox:w?e.bbox:void 0,u=y?e.features[r].id:w?e.id:void 0,l=s?s.type==="GeometryCollection":!1,a=l?s.geometries.length:1,n=0;n<a;n++){if(o=l?s.geometries[n]:s,o===null){if(i(null,g,f,h,u)===!1)return!1;continue}switch(o.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":{if(i(o,g,f,h,u)===!1)return!1;break}case"GeometryCollection":{for(t=0;t<o.geometries.length;t++)if(i(o.geometries[t],g,f,h,u)===!1)return!1;break}default:throw new Error("Unknown Geometry Type")}}g++}}function F(e,i,r){var t=r;return q(e,function(n,o,a,s,l){o===0&&r===void 0?t=n:t=i(t,n,o,a,s,l)}),t}function U(e){return F(e,(i,r)=>i+N(r),0)}function N(e){let i=0,r;switch(e.type){case"Polygon":return S(e.coordinates);case"MultiPolygon":for(r=0;r<e.coordinates.length;r++)i+=S(e.coordinates[r]);return i;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0}return 0}function S(e){let i=0;if(e&&e.length>0){i+=Math.abs(L(e[0]));for(let r=1;r<e.length;r++)i-=Math.abs(L(e[r]))}return i}var B=m*m/2,C=Math.PI/180;function L(e){const i=e.length-1;if(i<=2)return 0;let r=0,t=0;for(;t<i;){const n=e[t],o=e[t+1===i?0:t+1],a=e[t+2>=i?(t+2)%i:t+2],s=n[0]*C,l=o[1]*C,f=a[0]*C;r+=(f-s)*Math.sin(l),t++}return r*B}function X(e,i={}){let r=0,t=0,n=0;return G(e,function(o){r+=o[0],t+=o[1],n++}),R([r/n,t/n],i.properties)}export{U as a,X as c,O as p};
